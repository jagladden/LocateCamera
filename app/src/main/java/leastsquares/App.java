/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package leastsquares;

import org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        
        LocateCamera lc = new LocateCamera();
        
        lc.addLandmark(0, new LocateCamera.Point(0, 85)); 
        lc.addLandmark(1, new LocateCamera.Point(-12, 115));    
        lc.addLandmark(2, new LocateCamera.Point(-47, 130)); 
        lc.addLandmark(3, new LocateCamera.Point(-83, 130)); 
        
        lc.addDetectedTag(new LocateCamera.DetectedTag(0, 1.3450, 86));
        lc.addDetectedTag(new LocateCamera.DetectedTag(1, 1.5060, 116));
        lc.addDetectedTag(new LocateCamera.DetectedTag(2, 1.7944, 133));
        lc.addDetectedTag(new LocateCamera.DetectedTag(3, 2.0322, 133));
     
        LocateCamera.Result result = lc.solve();

      

        return;
    }

        
        
        
        
        /* 
        Vector2D p1 = new Vector2D(100, 120);
        Vector2D p2 = new Vector2D(150, 200);
        Vector2D p3 = new Vector2D(250, 150);
        Vector2D cameraXY = new Vector2D(75, 50);

        double angle1 = java.lang.Math.atan2(p1.getY() - cameraXY.getY(), p1.getX() - cameraXY.getX());
        double angle2 = java.lang.Math.atan2(p2.getY() - cameraXY.getY(), p2.getX() - cameraXY.getX());
        double angle3 = java.lang.Math.atan2(p3.getY() - cameraXY.getY(), p3.getX() - cameraXY.getX());

        double thetaAC = angle1 - angle2;
        double thetaCB = angle2 - angle3;
        double thetaAB = angle1 - angle3;
        
        double lineD = p1.distance(p2);
        double lineE = p2.distance(p3);
        double lineF = p1.distance(p3);

        RealVector vecABC = new ArrayRealVector(3);
        
        MultivariateJacobianFunction triangulate = new MultivariateJacobianFunction() {
            public Pair<RealVector, RealMatrix> value(final RealVector vABC) {
                
                RealVector vecCalcDEF = new ArrayRealVector(3);
                RealMatrix jacobian = new Array2DRowRealMatrix(3, 3);
                
                double A = vABC.getEntry(0);
                double B = vABC.getEntry(1);
                double C = vABC.getEntry(2);
                double D = sqrt(A*A + C*C - 2 * A * C * cos(thetaAC));
                double E = sqrt(B*B + C*C - 2 * B * C * cos(thetaCB));
                double F = sqrt(A*A + B*B - 2 * A * B * cos(thetaAB));

                vecCalcDEF.setEntry(0, D);
                vecCalcDEF.setEntry(1, E);
                vecCalcDEF.setEntry(2, F);

                jacobian.setEntry(0, 0, deriv(A, C, thetaAC));
                jacobian.setEntry(0, 1, 0);
                jacobian.setEntry(0, 2, deriv(C, A, thetaAC));

                jacobian.setEntry(1, 0, 0);
                jacobian.setEntry(1, 1, deriv(B, C, thetaCB));
                jacobian.setEntry(1, 2, deriv(C, B, thetaCB));

                jacobian.setEntry(2, 0, deriv(A, B, thetaAB));
                jacobian.setEntry(2, 1, deriv(B, A, thetaAB));
                jacobian.setEntry(2, 2, 0);

                return new Pair<RealVector, RealMatrix>(vecCalcDEF, jacobian);
            }
            private double deriv(double x, double a, double theta) {
                double K = cos(theta);
                return (2*x - 2*a*K)/(2*sqrt(x*x + a*a - 2*a*x*K));
            }
        };

        LeastSquaresProblem problem = new LeastSquaresBuilder().
                                start(new double[] { 100, 300, 200 }).
                                model(triangulate).
                                target(new double[] { lineD, lineE, lineF }).
                                lazyEvaluation(false).
                                maxEvaluations(1000).
                                maxIterations(1000).
                                build();

                LeastSquaresOptimizer.Optimum optimum = new LevenbergMarquardtOptimizer().optimize(problem);
        
                RealVector result = optimum.getPoint();
                double A = result.getEntry(0);
                double B = result.getEntry(1);
                double C = result.getEntry(2);

                double rms = optimum.getRMS();
                int interations = optimum.getIterations();
                int evaluations = optimum.getEvaluations();
*/
            
   

}
